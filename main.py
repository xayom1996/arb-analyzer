# main.py - –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
import aiohttp
from aiohttp import web, web_runner
import asyncio
import logging
import signal
import sys
from datetime import datetime
from typing import List
import os
from dotenv import load_dotenv
from simple_config import SimpleConfig
from data_models import PriceData, ArbitrageOpportunity
from arbitrage_analyzer import ArbitrageAnalyzer
from exchange_manager import ExchangeManager
from telegram_notifier import TelegramNotifier


class ArbitrageBotSystem:
    def __init__(self):
        self.config = SimpleConfig()
        self.exchange_manager = None
        self.arbitrage_analyzer = None
        self.telegram_notifier = None
        self.is_running = False
        self.logger = self._setup_logging()

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        # os.makedirs('logs', exist_ok=True)

        # logging.basicConfig(
        #     level=getattr(logging, self.config.LOG_LEVEL),
        #     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        #     handlers=[
        #         logging.FileHandler(f'logs/{self.config.LOG_FILE}'),
        #         logging.StreamHandler(sys.stdout)
        #     ]
        # )
        return logging.getLogger(__name__)

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info(
            "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ArbitrageBot (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if not self.config.TELEGRAM_BOT_TOKEN:
                raise Exception("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
            if not self.config.TELEGRAM_CHAT_ID:
                raise Exception("TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂
            self.exchange_manager = ExchangeManager(self.config)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            self.arbitrage_analyzer = ArbitrageAnalyzer(self.config)
            self.logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
            self.telegram_notifier = TelegramNotifier(self.config)
            await self.telegram_notifier.initialize()
            self.logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.telegram_notifier.send_system_message("üöÄ ArbitrageBot –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!")

            self.logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def get_monitoring_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
            symbols = await self.exchange_manager.fetch_popular_symbols(limit=400)

            if not symbols:
                self.logger.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
                # –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤
                symbols = [
                    'AVAX/USDT', 'POL/USDT', 'LINK/USDT', 'ATOM/USDT', 'NEAR/USDT',
                    'FTM/USDT', 'ONE/USDT', 'ALGO/USDT', 'VET/USDT', 'ENJ/USDT',
                    'SAND/USDT', 'MANA/USDT', 'AXS/USDT', 'GALA/USDT', 'CHZ/USDT',
                    'FIL/USDT', 'XTZ/USDT', 'EGLD/USDT', 'FLOW/USDT', 'ICP/USDT'
                ]

            self.logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–º {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            return symbols

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []

    async def monitoring_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        cycle_count = 0

        while self.is_running:
            try:
                cycle_start = datetime.now()
                cycle_count += 1

                self.logger.info(f"üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ #{cycle_count} –Ω–∞—á–∞—Ç...")

                await self.exchange_manager.initialize_exchanges()
                self.logger.info("‚úÖ –ë–∏—Ä–∂–∏ load markets —É—Å–ø–µ—à–Ω—ã")

                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                symbols = await self.get_monitoring_symbols()
                if not symbols:
                    await asyncio.sleep(60)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂
                self.logger.info("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂...")
                await self.exchange_manager.fetch_all_tickers(symbols, self.telegram_notifier, self.arbitrage_analyzer)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.arbitrage_analyzer.update_session_stats()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                cycle_duration = (datetime.now() - cycle_start).total_seconds()
                self.logger.info(
                    f"‚è±Ô∏è –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.2f} —Å–µ–∫")

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                sleep_time = max(
                    0, self.config.UPDATE_INTERVAL - cycle_duration)
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)

            except KeyboardInterrupt:
                self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await self.telegram_notifier.send_system_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)[:100]}...")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            await self.initialize()

            self.is_running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.monitoring_cycle()

        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            if self.telegram_notifier:
                await self.telegram_notifier.send_system_message(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}...")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        self.is_running = False

        try:
            if self.telegram_notifier:
                session_summary = self.arbitrage_analyzer.get_session_summary()
                await self.telegram_notifier.send_system_message(f"üõë –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É\n\n{session_summary}")
                await self.telegram_notifier.close()

            if self.exchange_manager:
                await self.exchange_manager.close_all_exchanges()

            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check


class HealthServer:
    def __init__(self, port: int = 8000):
        self.port = port
        self.app = web.Application()
        self.runner = None
        self.site = None

    async def health_handler(self, request):
        """Health check endpoint"""
        return web.json_response({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'service': 'arbitrage-bot'
        })

    async def start(self):
        """–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞"""
        self.app.router.add_get('/health', self.health_handler)
        self.runner = web_runner.AppRunner(self.app)
        await self.runner.setup()
        self.site = web_runner.TCPSite(self.runner, '0.0.0.0', self.port)
        await self.site.start()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.site:
            await self.site.stop()
        if self.runner:
            await self.runner.cleanup()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    bot_system = ArbitrageBotSystem()

    # –°–æ–∑–¥–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
    health_server = HealthServer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    def signal_handler(signum, frame):
        bot_system.is_running = False

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
        await health_server.start()
        bot_system.logger.info("‚úÖ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        await bot_system.run()

    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
        await health_server.stop()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    required_vars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHAT_ID']
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(
            f"‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("\n–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("export TELEGRAM_BOT_TOKEN='your_bot_token'")
        print("export TELEGRAM_CHAT_ID='your_chat_id'")
        print("\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —ç—Ç–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã ArbitrageBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
