# arbitrage_analyzer.py - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from typing import List, Dict
from datetime import datetime
import logging
from collections import defaultdict
from data_models import PriceData, ArbitrageOpportunity, NotificationManager

class ArbitrageAnalyzer:
    def __init__(self, config):
        self.config = config
        self.notification_manager = NotificationManager(config.ALERT_COOLDOWN_MINUTES)
        self.logger = logging.getLogger(__name__)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        self.session_stats = {
            'cycles_completed': 0,
            'total_opportunities_found': 0,
            'alerts_sent': 0,
            'start_time': datetime.now()
        }
    
    def analyze_arbitrage_opportunities(self, price_data: List[PriceData]) -> List[ArbitrageOpportunity]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        opportunities = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        prices_by_symbol = defaultdict(list)
        for price in price_data:
            prices_by_symbol[price.symbol].append(price)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        for symbol, prices in prices_by_symbol.items():
            if len(prices) < 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –±–∏—Ä–∂–∏
                continue
                
            symbol_opportunities = self._analyze_symbol(symbol, prices)
            opportunities.extend(symbol_opportunities)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞–∑–Ω–æ—Å—Ç–∏ —Ü–µ–Ω
        opportunities.sort(key=lambda x: x.price_difference_percent, reverse=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.session_stats['total_opportunities_found'] += len(opportunities)
        
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        return opportunities
    
    def _analyze_symbol(self, symbol: str, prices: List[PriceData]) -> List[ArbitrageOpportunity]:
        """–ê–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        opportunities = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–Ω—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –æ–±—ä–µ–º–æ–º
        valid_prices = [
            p for p in prices 
            if p.volume_24h >= self.config.MIN_VOLUME_USD
        ]
        
        if len(valid_prices) < 2:
            return opportunities
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        valid_prices.sort(key=lambda x: x.price)
        
        min_price_data = valid_prices[0]  # –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ (–ø–æ–∫—É–ø–∫–∞)
        max_price_data = valid_prices[-1]  # –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–¥–∞–∂–∞)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        price_difference = ((max_price_data.price - min_price_data.price) / min_price_data.price) * 100
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
        if price_difference >= self.config.PRICE_DIFFERENCE_THRESHOLD:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if self._is_valid_opportunity(symbol, min_price_data, max_price_data, price_difference):
                opportunity = ArbitrageOpportunity(
                    symbol=symbol,
                    buy_exchange=min_price_data.exchange,
                    sell_exchange=max_price_data.exchange,
                    buy_price=min_price_data.price,
                    sell_price=max_price_data.price,
                    price_difference_percent=price_difference,
                    min_volume_24h=min(min_price_data.volume_24h, max_price_data.volume_24h),
                    timestamp=datetime.now()
                )
                opportunities.append(opportunity)
        
        return opportunities
    
    def _is_valid_opportunity(self, symbol: str, buy_data: PriceData, sell_data: PriceData, 
                            price_difference: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –±–∏—Ä–∂–∞
        if buy_data.exchange == sell_data.exchange:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        now = datetime.now()
        if (now - buy_data.timestamp).seconds > 300 or (now - sell_data.timestamp).seconds > 300:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        if buy_data.volume_24h < self.config.MIN_VOLUME_USD * 1.5 or sell_data.volume_24h < self.config.MIN_VOLUME_USD * 1.5:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö)
        if price_difference > 50:
            self.logger.warning(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –¥–ª—è {symbol}: {price_difference:.2f}%")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω
        if buy_data.price <= 0 or sell_data.price <= 0:
            return False
        
        return True
    
    def filter_notifications(self, opportunities: List[ArbitrageOpportunity]) -> List[ArbitrageOpportunity]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–∑–±–µ–≥–∞–µ–º —Å–ø–∞–º)"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.notification_manager.cleanup_old_notifications()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        new_opportunities = [
            opp for opp in opportunities 
            if self.notification_manager.should_notify(opp)
        ]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —Ü–∏–∫–ª
        limited_opportunities = new_opportunities[:self.config.MAX_ALERTS_PER_CYCLE]
        
        if limited_opportunities:
            self.session_stats['alerts_sent'] += len(limited_opportunities)
        
        return limited_opportunities
    
    def get_market_overview(self, price_data: List[PriceData]) -> Dict[str, any]:
        """–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbols_data = defaultdict(list)
        for price in price_data:
            symbols_data[price.symbol].append(price)
        
        total_symbols = len(symbols_data)
        symbols_with_arbitrage = 0
        max_spread = 0
        best_opportunity = None
        exchange_counts = defaultdict(int)
        
        for symbol, prices in symbols_data.items():
            if len(prices) < 2:
                continue
                
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∏—Ä–∂–∏
            for price in prices:
                exchange_counts[price.exchange] += 1
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ø—Ä–µ–¥
            min_price = min(prices, key=lambda x: x.price)
            max_price = max(prices, key=lambda x: x.price)
            spread = ((max_price.price - min_price.price) / min_price.price) * 100
            
            if spread >= self.config.PRICE_DIFFERENCE_THRESHOLD:
                symbols_with_arbitrage += 1
                
                if spread > max_spread:
                    max_spread = spread
                    best_opportunity = {
                        'symbol': symbol,
                        'buy_exchange': min_price.exchange,
                        'sell_exchange': max_price.exchange,
                        'spread': spread
                    }
        
        return {
            'timestamp': datetime.now(),
            'total_symbols_monitored': total_symbols,
            'symbols_with_arbitrage': symbols_with_arbitrage,
            'arbitrage_percentage': (symbols_with_arbitrage / total_symbols * 100) if total_symbols > 0 else 0,
            'max_spread_found': max_spread,
            'best_opportunity': best_opportunity,
            'exchanges_data_count': dict(exchange_counts),
            'session_stats': self.session_stats.copy(),
            'notification_stats': self.notification_manager.get_stats()
        }
    
    def update_session_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        self.session_stats['cycles_completed'] += 1
    
    def get_session_summary(self) -> str:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏"""
        runtime = datetime.now() - self.session_stats['start_time']
        hours = runtime.total_seconds() / 3600
        
        return f"""üìä –°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏:
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours:.1f} —á–∞—Å–æ–≤
‚Ä¢ –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.session_stats['cycles_completed']}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {self.session_stats['total_opportunities_found']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.session_stats['alerts_sent']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ü–∏–∫–ª: {self.session_stats['total_opportunities_found'] / max(1, self.session_stats['cycles_completed']):.1f}"""