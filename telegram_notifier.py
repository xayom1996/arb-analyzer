# telegram_notifier.py - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import asyncio
import httpx
from typing import List
from datetime import datetime
import logging
from data_models import ArbitrageOpportunity

class TelegramNotifier:
    def __init__(self, config):
        self.config = config
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.chat_id = config.TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.client = None
        self.logger = logging.getLogger(__name__)
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.client = httpx.AsyncClient(timeout=30.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            response = await self.client.get(f"{self.base_url}/getMe")
            if response.status_code == 200:
                bot_info = response.json()
                bot_name = bot_info['result']['first_name']
                self.logger.info(f"‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {bot_name}")
            else:
                raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {response.text}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
            raise
    
    async def send_message(self, text: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            response = await self.client.post(
                f"{self.base_url}/sendMessage",
                json={
                    "chat_id": self.chat_id,
                    "text": text,
                    "parse_mode": parse_mode,
                    "disable_web_page_preview": True
                }
            )
            
            if response.status_code == 200:
                return True
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_arbitrage_alerts(self, opportunities: List[ArbitrageOpportunity]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        if not opportunities:
            return
        
        try:
            for i, opportunity in enumerate(opportunities):
                profit_calc = opportunity.profit_estimation()
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                alert_message = f"""
üö® <b>–ê–†–ë–ò–¢–†–ê–ñ #{i+1}</b>

üíé <b>–ú–æ–Ω–µ—Ç–∞:</b> {opportunity.symbol}
üí∞ <b>–°–ø—Ä–µ–¥:</b> <b>{opportunity.price_difference_percent:.2f}%</b>

üìà <b>–ö–£–ü–ò–¢–¨:</b>
üèõÔ∏è –ë–∏—Ä–∂–∞: <b>{opportunity.buy_exchange}</b>
üíµ –¶–µ–Ω–∞: <code>${opportunity.buy_price:.8f}</code>

üìâ <b>–ü–†–û–î–ê–¢–¨:</b>
üèõÔ∏è –ë–∏—Ä–∂–∞: <b>{opportunity.sell_exchange}</b>
üíµ –¶–µ–Ω–∞: <code>${opportunity.sell_price:.8f}</code>

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
üìà –û–±—ä–µ–º 24—á: <code>${opportunity.min_volume_24h:,.0f}</code>
‚è∞ –í—Ä–µ–º—è: <code>{opportunity.timestamp.strftime('%H:%M:%S')}</code>

üí∏ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —Å $1000:</b>
‚Ä¢ –í–∞–ª–æ–≤–∞—è: <b>${profit_calc['gross_profit']:.2f}</b>
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: <b>-${profit_calc['estimated_fees']:.2f}</b>
‚Ä¢ –ß–∏—Å—Ç–∞—è: <b>${profit_calc['net_profit']:.2f}</b>
‚Ä¢ ROI: <b>{profit_calc['roi_percentage']:.2f}%</b>

‚ö†Ô∏è <i>–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π!</i>
                """.strip()
                
                success = await self.send_message(alert_message)
                
                if success:
                    self.logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {opportunity.symbol}")
                else:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {opportunity.symbol}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∏–∑–±–µ–≥–∞–µ–º –ª–∏–º–∏—Ç—ã)
                if i < len(opportunities) - 1:
                    await asyncio.sleep(2)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–µ: {e}")
    
    async def send_system_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            system_message = f"ü§ñ <b>–°–∏—Å—Ç–µ–º–∞ ArbitrageBot</b>\n\n{message}"
            await self.send_message(system_message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        startup_message = f"""
üöÄ <b>ArbitrageBot –∑–∞–ø—É—â–µ–Ω!</b>

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ü–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞: <b>{self.config.PRICE_DIFFERENCE_THRESHOLD}%</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: <b>${self.config.MIN_VOLUME_USD:,}</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: <b>{self.config.UPDATE_INTERVAL} —Å–µ–∫</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —Ü–∏–∫–ª: <b>{self.config.MAX_ALERTS_PER_CYCLE}</b>
‚Ä¢ Cooldown –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: <b>{self.config.ALERT_COOLDOWN_MINUTES} –º–∏–Ω</b>

üèõÔ∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –±–∏—Ä–∂–∏:</b>
{', '.join(self.config.EXCHANGES)}

üìä <b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—é —Ä—ã–Ω–æ–∫!

üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
        """.strip()
        
        await self.send_message(startup_message)
    
    async def send_market_summary(self, market_overview: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞"""
        try:
            best_opp = market_overview.get('best_opportunity')
            session_stats = market_overview.get('session_stats', {})
            
            summary_message = f"""
üìä <b>–°–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞</b>

üìà <b>–ê–Ω–∞–ª–∏–∑:</b>
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è: <b>{market_overview['total_symbols_monitored']}</b>
‚Ä¢ –° –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º: <b>{market_overview['symbols_with_arbitrage']}</b>
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: <b>{market_overview['arbitrage_percentage']:.1f}%</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <b>{market_overview['max_spread_found']:.2f}%</b>

üéØ <b>–õ—É—á—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:</b>
{f"‚Ä¢ {best_opp['symbol']}: {best_opp['spread']:.2f}%" if best_opp else "‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–∞"}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:</b>
‚Ä¢ –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{session_stats.get('cycles_completed', 0)}</b>
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: <b>{session_stats.get('total_opportunities_found', 0)}</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{session_stats.get('alerts_sent', 0)}</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {market_overview['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}
            """.strip()
            
            await self.send_message(summary_message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.aclose()
            self.logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")